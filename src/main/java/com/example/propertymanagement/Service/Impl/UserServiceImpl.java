package com.example.propertymanagement.Service.Impl;

import com.example.propertymanagement.Converter.UserConverter;
import com.example.propertymanagement.Dto.UserDto;
import com.example.propertymanagement.Repository.UserRepository;
import com.example.propertymanagement.Service.UserService;
import com.example.propertymanagement.entity.UserEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;


import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserConverter userConverter;

    @Autowired
    private JavaMailSender javaMailSender;

    @Override
    public UserDto register(UserDto userDto) {
        // if user exist then return notice that user already exist
        UserEntity userEntity=userConverter.convertDtoToEntity(userDto);  // converting dto to entity
        try {
            userRepository.save(userEntity);             // saving the return entity into repository
            userDto = userConverter.convertEntityToDto(userEntity);
//            emailService.sendMail("dewashishpainkra126@gmail.com","test subject","test body");
//            String body = "Hi this is to confirm your booking for seat No for the movie : ";
//
//
//            MimeMessage mimeMessage=javaMailSender.createMimeMessage();
//            MimeMessageHelper mimeMessageHelper=new MimeMessageHelper(mimeMessage,true);
//            mimeMessageHelper.setFrom("dewashishbot@gmail.com");
//            mimeMessageHelper.setTo("dewashishpainkra126@gmail.com");
//            mimeMessageHelper.setText(body);
//            mimeMessageHelper.setSubject("Confirming your booked Ticket");
//
//            javaMailSender.send(mimeMessage);
            SimpleMailMessage mailMessage=new SimpleMailMessage();
            mailMessage.setFrom("dewashishbot@gmail.com");
            mailMessage.setTo("knarayanmj@gmail.com");
            mailMessage.setSubject("Registration Succesful | Welcome to Dewashish Pvt. Ltd!");
            mailMessage.setText("Dear " + userDto.getOwnerName() + ",\n\n"
                    + "Congratulations on successfully registering with Dewashish Pvt Ltd! We are thrilled to have you as a new member of our community.\n\n"
                    + "At Dewashish Pvt Ltd, we strive to provide exceptional services and opportunities for our valued members. Your registration marks the beginning of a fruitful journey with us.\n\n"
                    + "Please feel free to explore our website, take advantage of our offerings, and engage with our talented team. If you have any questions or need assistance, don't hesitate to reach out to our customer support team.\n\n"
                    + "Once again, welcome aboard! We look forward to serving you and helping you achieve your goals at Dewashish Pvt Ltd.\n\n"
                    + "Best regards,\n" +
                    "Dewashish\n" +
                    "Dewashish Pvt Ltd\n\n\n"
                    + "Please do not reply to this email. This email is autogenerated"

            );
            javaMailSender.send(mailMessage);


        }
        catch(Exception e)
        {
            System.out.println("Entered Email is already registered");
            return null;
        }
        return userDto;
    }

    @Override
    public UserDto logIn(String email, String password) {
        Optional<UserEntity> optionalUser = userRepository.findByOwnerEmail(email);
        if(optionalUser.isPresent())
        {
            BCryptPasswordEncoder bcrypt =new BCryptPasswordEncoder();
            if(bcrypt.matches(password,optionalUser.get().getPassword())) {
                return userConverter.convertEntityToDto(optionalUser.get());
            }
            else return null;
        }
        return  null;
    }
}
