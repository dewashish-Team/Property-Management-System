package com.example.propertymanagement.Service.Impl;

import com.example.propertymanagement.Converter.UserConverter;
import com.example.propertymanagement.Dto.OtpDto;
import com.example.propertymanagement.Dto.UserDto;
import com.example.propertymanagement.Exception.BusinessException;
import com.example.propertymanagement.Exception.ErrorModel;
import com.example.propertymanagement.Repository.OtpRepository;
import com.example.propertymanagement.Repository.UserRepository;
import com.example.propertymanagement.Service.UserService;
import com.example.propertymanagement.entity.OtpEntity;
import com.example.propertymanagement.entity.UserEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserConverter userConverter;

    @Autowired
    private JavaMailSender javaMailSender;

    @Autowired
    private OtpRepository otpRepository;

    @Override
    public UserDto register(UserDto userDto) {
        // if user exist then return notice that user already exist
//            Optional<UserEntity> optionalUser=userRepository.findByOwnerEmail(userDto.getOwnerEmail());
//            if(optionalUser.isPresent())
//            {
//                List<ErrorModel> errors=new ArrayList<>();
//                ErrorModel error1=new ErrorModel();
//                error1.setErrorCode("USER_EXIST");
//                error1.setErrorMessage("user already exist");
//                errors.add(error1);
//                throw new BusinessException(errors);
//
//            }

            try {
                UserEntity userEntity = userConverter.convertDtoToEntity(userDto);  // converting dto to entity
                userRepository.save(userEntity);             // saving the return entity into repository
                userDto = userConverter.convertEntityToDto(userEntity);
//            emailService.sendMail("dewashishpainkra126@gmail.com","test subject","test body");
//            String body = "Hi this is to confirm your booking for seat No for the movie : ";
//
//
//            MimeMessage mimeMessage=javaMailSender.createMimeMessage();
//            MimeMessageHelper mimeMessageHelper=new MimeMessageHelper(mimeMessage,true);
//            mimeMessageHelper.setFrom("dewashishbot@gmail.com");
//            mimeMessageHelper.setTo("dewashishpainkra126@gmail.com");
//            mimeMessageHelper.setText(body);
//            mimeMessageHelper.setSubject("Confirming your booked Ticket");
//
//            javaMailSender.send(mimeMessage);
                SimpleMailMessage mailMessage = new SimpleMailMessage();
                mailMessage.setFrom("dewashishbot@gmail.com");
                mailMessage.setTo("dewashishpainkra126@gmail.com");
                mailMessage.setSubject("Registration Succesful | Welcome to Dewashish Pvt. Ltd!");
                mailMessage.setText("Dear " + userDto.getOwnerName() + ",\n\n"
                        + "Congratulations on successfully registering with Dewashish Pvt Ltd! We are thrilled to have you as a new member of our community.\n\n"
                        + "At Dewashish Pvt Ltd, we strive to provide exceptional services and opportunities for our valued members. Your registration marks the beginning of a fruitful journey with us.\n\n"
                        + "Please feel free to explore our website, take advantage of our offerings, and engage with our talented team. If you have any questions or need assistance, don't hesitate to reach out to our customer support team.\n\n"
                        + "Once again, welcome aboard! We look forward to serving you and helping you achieve your goals at Dewashish Pvt Ltd.\n\n"
                        + "Best regards,\n" +
                        "Dewashish\n" +
                        "Dewashish Pvt Ltd\n\n\n"
                        + "Please do not reply to this email. This email is autogenerated"

                );
                javaMailSender.send(mailMessage);
                return userDto;
            }
            catch (DataIntegrityViolationException e)
            {
                List<ErrorModel> errors=new ArrayList<>();
                ErrorModel error1=new ErrorModel();
                error1.setErrorCode("USER_EXIST");
                error1.setErrorMessage("user already exist");
                errors.add(error1);
                throw new BusinessException(errors);
            }
            catch (Exception e)
            {
                List<ErrorModel> errors=new ArrayList<>();
                ErrorModel error1=new ErrorModel();
                error1.setErrorCode("BAD_REQUEST");
                error1.setErrorMessage("other error check server");
                errors.add(error1);
                throw new BusinessException(errors);
            }
    }

    @Override
    public UserDto logIn(String email, String password) {
        Optional<UserEntity> optionalUser = userRepository.findByOwnerEmail(email);
        if(optionalUser.isPresent())
        {
            BCryptPasswordEncoder bcrypt =new BCryptPasswordEncoder();
            if(bcrypt.matches(password,optionalUser.get().getPassword())) {
                return userConverter.convertEntityToDto(optionalUser.get());
            }
            else {
                List<ErrorModel> errors= new ArrayList<>();
                ErrorModel error1=new ErrorModel();
                error1.setErrorCode("INVALID_PASSWORD");
                error1.setErrorMessage("incorrect password");
                errors.add(error1);

                ErrorModel error2=new ErrorModel();
                error2.setErrorCode("INVALID_PASSWORD2");
                error2.setErrorMessage("incorrect password2");
                errors.add(error2);

                throw new BusinessException(errors);

            }
        }
        else {
            List<ErrorModel> errors= new ArrayList<>();
            ErrorModel error1=new ErrorModel();
            error1.setErrorCode("INVALID_EMAIL");
            error1.setErrorMessage("incorrect Email id");
            errors.add(error1);

            throw new BusinessException(errors);
        }

    }

    @Override
    public UserDto passwordResetOtpGeneration(String email) {
        // first step verify the email with user table
        // then generate the otp
        Optional<UserEntity> optionalUser=userRepository.findByOwnerEmail(email);

        if(optionalUser.isPresent())
        {
            Optional<OtpEntity> optionalOtpEntity=otpRepository.findByEmail(email);
            String otp = Integer.toString((int) (Math.random() * 1000000));
            Long timeGenerated=System.currentTimeMillis();
            if(otp.length()!=6)
            {
                for(int i=0;i<6-otp.length();i++)
                {
                    otp="0"+otp;
                }
            }

            if(!optionalOtpEntity.isPresent()) {
                OtpEntity otpEntity = new OtpEntity();
                otpEntity.setEmail(email);

                otpEntity.setOtp(otp);
                otpEntity.setOtpGeneratedTime(timeGenerated);
                otpRepository.save(otpEntity);
                return userConverter.convertEntityToDto(optionalUser.get());
            }
            else {
                OtpEntity otpEntity=optionalOtpEntity.get();
                otpEntity.setOtp(otp);
                otpEntity.setOtpGeneratedTime(timeGenerated);
                otpRepository.save(otpEntity);
                return userConverter.convertEntityToDto(optionalUser.get());
            }

        }
        return null;
    }

    @Override
    public String passwordResetOtpVerification(OtpDto otpDto) {
        Optional<OtpEntity> optionalOtpEntity=otpRepository.findByEmail(otpDto.getEmail());
        Long time= Long.valueOf(5*60*1000);  // 5 min otp time
        Long currentTime=System.currentTimeMillis();


        if(optionalOtpEntity.isPresent() )
        {   Long timeElapsed=currentTime-optionalOtpEntity.get().getOtpGeneratedTime();
            System.out.println(timeElapsed+" time elapsed");
            if(timeElapsed<time) {
                if (otpDto.getOtp().equals(optionalOtpEntity.get().getOtp())) {
                    otpRepository.delete(optionalOtpEntity.get());
                    return "otp succesfull matched";
                }
                else return "wrong otp";
            }
            else return "otp expired";

        }
        return "Wrong email";
    }



}
